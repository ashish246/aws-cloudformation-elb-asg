AWSTemplateFormatVersion: "2010-09-09"
Description: "AWS CloudFormation Sample Template AutoScalingMultiAZ:
  Create a multi-az, load balanced and Auto Scaled sample app running MySQL server. The application is configured to span all Availability Zones in the
  region and is Auto-Scaled based on the CPU utilization of the web servers. The instances are
  load balanced with a simple health check."

Parameters:
  EnvironmentName:
    Type: String
    Default: test
    Description: "Your deployment environment: dev, test, qa, prod"
  InstanceType:
    Description: App and MySQL EC2 instance type
    Type: String
    Default: t2.small
    AllowedValues:
      [
        t1.micro,
        t2.nano,
        t2.micro,
        t2.small,
        t2.medium,
        t2.large,
        m1.small,
        m1.medium,
        m1.large,
        m1.xlarge,
        m2.xlarge,
        m2.2xlarge,
        m2.4xlarge,
        m3.medium,
        m3.large,
        m3.xlarge,
        m3.2xlarge,
        m4.large,
        m4.xlarge,
        m4.2xlarge,
        m4.4xlarge,
        m4.10xlarge,
        c1.medium,
        c1.xlarge,
        c3.large,
        c3.xlarge,
        c3.2xlarge,
        c3.4xlarge,
        c3.8xlarge,
        c4.large,
        c4.xlarge,
        c4.2xlarge,
        c4.4xlarge,
        c4.8xlarge,
        g2.2xlarge,
        g2.8xlarge,
        r3.large,
        r3.xlarge,
        r3.2xlarge,
        r3.4xlarge,
        r3.8xlarge,
        i2.xlarge,
        i2.2xlarge,
        i2.4xlarge,
        i2.8xlarge,
        d2.xlarge,
        d2.2xlarge,
        d2.4xlarge,
        d2.8xlarge,
        hi1.4xlarge,
        hs1.8xlarge,
        cr1.8xlarge,
        cc2.8xlarge,
        cg1.4xlarge,
      ]
    ConstraintDescription: must be a valid EC2 instance type.
  KeyName:
    Description: The EC2 Key Pair to allow SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName
    Default: my-catch-key
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
Mappings:
  AWSInstanceType2Arch:
    t1.micro:
      Arch: PV64
    t2.nano:
      Arch: HVM64
    t2.micro:
      Arch: HVM64
    t2.small:
      Arch: HVM64
    t2.medium:
      Arch: HVM64
    t2.large:
      Arch: HVM64
    m1.small:
      Arch: PV64
    m1.medium:
      Arch: PV64
    m1.large:
      Arch: PV64
    m1.xlarge:
      Arch: PV64
    m2.xlarge:
      Arch: PV64
    m2.2xlarge:
      Arch: PV64
    m2.4xlarge:
      Arch: PV64
    m3.medium:
      Arch: HVM64
    m3.large:
      Arch: HVM64
    m3.xlarge:
      Arch: HVM64
    m3.2xlarge:
      Arch: HVM64
    m4.large:
      Arch: HVM64
    m4.xlarge:
      Arch: HVM64
    m4.2xlarge:
      Arch: HVM64
    m4.4xlarge:
      Arch: HVM64
    m4.10xlarge:
      Arch: HVM64
    c1.medium:
      Arch: PV64
    c1.xlarge:
      Arch: PV64
    c3.large:
      Arch: HVM64
    c3.xlarge:
      Arch: HVM64
    c3.2xlarge:
      Arch: HVM64
    c3.4xlarge:
      Arch: HVM64
    c3.8xlarge:
      Arch: HVM64
    c4.large:
      Arch: HVM64
    c4.xlarge:
      Arch: HVM64
    c4.2xlarge:
      Arch: HVM64
    c4.4xlarge:
      Arch: HVM64
    c4.8xlarge:
      Arch: HVM64
    g2.2xlarge:
      Arch: HVMG2
    g2.8xlarge:
      Arch: HVMG2
    r3.large:
      Arch: HVM64
    r3.xlarge:
      Arch: HVM64
    r3.2xlarge:
      Arch: HVM64
    r3.4xlarge:
      Arch: HVM64
    r3.8xlarge:
      Arch: HVM64
    i2.xlarge:
      Arch: HVM64
    i2.2xlarge:
      Arch: HVM64
    i2.4xlarge:
      Arch: HVM64
    i2.8xlarge:
      Arch: HVM64
    d2.xlarge:
      Arch: HVM64
    d2.2xlarge:
      Arch: HVM64
    d2.4xlarge:
      Arch: HVM64
    d2.8xlarge:
      Arch: HVM64
    hi1.4xlarge:
      Arch: HVM64
    hs1.8xlarge:
      Arch: HVM64
    cr1.8xlarge:
      Arch: HVM64
    cc2.8xlarge:
      Arch: HVM64
  AWSRegionArch2AMI:
    us-east-1:
      PV64: ami-2a69aa47
      HVM64: ami-6869aa05
      HVMG2: ami-50b4f047
    us-west-2:
      PV64: ami-7f77b31f
      HVM64: ami-7172b611
      HVMG2: ami-002bf460
    us-west-1:
      PV64: ami-a2490dc2
      HVM64: ami-31490d51
      HVMG2: ami-699ad409
    eu-west-1:
      PV64: ami-4cdd453f
      HVM64: ami-f9dd458a
      HVMG2: ami-f0e0a483
    eu-central-1:
      PV64: ami-6527cf0a
      HVM64: ami-ea26ce85
      HVMG2: ami-d9d62ab6
    ap-northeast-1:
      PV64: ami-3e42b65f
      HVM64: ami-374db956
      HVMG2: ami-78ba6619
    ap-northeast-2:
      PV64: NOT_SUPPORTED
      HVM64: ami-2b408b45
      HVMG2: NOT_SUPPORTED
    ap-southeast-1:
      PV64: ami-df9e4cbc
      HVM64: ami-a59b49c6
      HVMG2: ami-56e84c35
    ap-southeast-2:
      PV64: ami-63351d00
      HVM64: ami-dc361ebf
      HVMG2: ami-2589b946
    ap-south-1:
      PV64: NOT_SUPPORTED
      HVM64: ami-ffbdd790
      HVMG2: ami-f7354198
    us-east-2:
      PV64: NOT_SUPPORTED
      HVM64: ami-f6035893
      HVMG2: NOT_SUPPORTED
    sa-east-1:
      PV64: ami-1ad34676
      HVM64: ami-6dd04501
      HVMG2: NOT_SUPPORTED
    cn-north-1:
      PV64: ami-77559f1a
      HVM64: ami-8e6aa0e3
      HVMG2: NOT_SUPPORTED

Resources:
  AppServerGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub ${EnvironmentName}-app-auto-scaling-group
      AvailabilityZones: !GetAZs ""
      LaunchConfigurationName: !Ref "AppLaunchConfig"
      MinSize: "2"
      MaxSize: "3"
      HealthCheckGracePeriod: 120
      LoadBalancerNames: [!Ref "ElasticLoadBalancer"]

  AppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      LaunchConfigurationName: !Sub ${EnvironmentName}-app-launch-config
      KeyName: !Ref "KeyName"
      ImageId:
        !FindInMap [
          AWSRegionArch2AMI,
          !Ref "AWS::Region",
          !FindInMap [AWSInstanceType2Arch, !Ref "InstanceType", Arch],
        ]
      SecurityGroups: [!Ref "AppSecurityGroup"]
      InstanceType: !Ref "InstanceType"
      UserData: !Base64 |
        #!/bin/bash -ex
        # put your script here. -e makes the shell exit immediately whenever something returns an error (this is often used in shell scripts as a failsafe mechanism), 
        # and -x enables verbose execution of scripts so that you can see what's happening
        # curl https://raw.githubusercontent.com/tnh/interviews/main/fix-cloudformation-stack/install-app.sh  | bash
        # get admin privileges
        sudo su
        yum update -y
        yum install -y httpd
        service httpd start
        echo "Hello World from $(hostname -f)" > /var/www/html/index.html

  ElasticLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      LoadBalancerName: !Sub ${EnvironmentName}-app-elb
      AvailabilityZones: !GetAZs ""
      CrossZone: true
      Listeners:
        - LoadBalancerPort: "80"
          InstancePort: "80"
          Protocol: HTTP
      HealthCheck:
        Target: HTTP:80/
        HealthyThreshold: "3"
        UnhealthyThreshold: "5"
        Interval: "10"
        Timeout: "5"

  AppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${EnvironmentName}-app-security-group
      GroupDescription: Enable MySQL access and HTTP from the load balancer only
      SecurityGroupIngress:
        - FromPort: 80
          ToPort: 80
          IpProtocol: tcp
          SourceSecurityGroupOwnerId: !GetAtt ElasticLoadBalancer.SourceSecurityGroup.OwnerAlias
          SourceSecurityGroupName: !GetAtt ElasticLoadBalancer.SourceSecurityGroup.GroupName
        # - CidrIp: 0.0.0.0/0
        #   FromPort: 3306
        #   ToPort: 3306
        #   IpProtocol: tcp
        # - CidrIp: 0.0.0.0/0
        #   FromPort: 22
        #   ToPort: 22
        #   IpProtocol: tcp

Outputs:
  URL:
    Description: The URL of the website
    Value: !Join ["", ["http://", !GetAtt [ElasticLoadBalancer, DNSName]]]
